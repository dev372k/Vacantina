// <auto-generated />
using System;
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(ApplicationDBContext))]
    partial class ApplicationDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Permissions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2771),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Permission.User",
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2781)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2783),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Permission.Setting",
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2784)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2785),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Permission.Role",
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2785)
                        });
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2877),
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Owner",
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2877)
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAllowed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.HasIndex("RoleId");

                    b.ToTable("RolePermission");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2890),
                            IsActive = true,
                            IsAllowed = true,
                            IsDeleted = false,
                            PermissionId = 1,
                            RoleId = 1,
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2890)
                        },
                        new
                        {
                            Id = 2,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2892),
                            IsActive = true,
                            IsAllowed = true,
                            IsDeleted = false,
                            PermissionId = 2,
                            RoleId = 1,
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2892)
                        },
                        new
                        {
                            Id = 3,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2893),
                            IsActive = true,
                            IsAllowed = true,
                            IsDeleted = false,
                            PermissionId = 3,
                            RoleId = 1,
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2894)
                        });
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2905),
                            Email = "sa@mailinator.com",
                            IsActive = true,
                            IsDeleted = false,
                            Name = "Owner",
                            PasswordHash = "$2a$11$LF.jO5445FGwpoGW9PGgR.TKNymOmleYKS2vPhTcpqanjMM9stbIC",
                            RoleId = 1,
                            UpdatedOn = new DateTime(2024, 6, 24, 1, 58, 47, 278, DateTimeKind.Local).AddTicks(2905)
                        });
                });

            modelBuilder.Entity("Domain.Entities.RolePermission", b =>
                {
                    b.HasOne("Domain.Entities.Permission", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Entities.Role", null)
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.HasOne("Domain.Entities.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Domain.Entities.Permission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("Domain.Entities.Role", b =>
                {
                    b.Navigation("RolePermissions");
                });
#pragma warning restore 612, 618
        }
    }
}
